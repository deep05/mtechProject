import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { CrudService } from 'src/app/common/services/crud.service';
import { ConfigService } from 'src/app/core/services/config.service';
import { NotificationServices } from 'src/app/core/services/notification-service.service';
import { credentials } from 'src/app/core/constant/credentials'
import { Router } from '@angular/router';
import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-bill-entry',
  templateUrl: './bill-entry.component.html',
  styleUrls: ['./bill-entry.component.css']
})
export class BillEntryComponent implements OnInit {
  @ViewChild('f', { static: false }) form: NgForm;
  model: any = {}
  model_two: any = {}
  modelTwoArray: any = [];
  modelList = []
  billTypeList = []
  itemCodeList = []
  customerCodeList = []
  searchFromFilter: boolean = false;
  filters = ""
  minDate = new Date();

  FORM_TYPE = "";
  ACTION_FLAG = "";

  constructor(private configService: ConfigService,
    private notificationServices: NotificationServices,
    private crudService: CrudService,
    public router: Router,
    public datepipe: DatePipe,) { }

  ngOnInit(): void {
    this.onRefresh()
  }

  onRefresh() {
    if (this.router.url === '/bill-entry') {
      this.FORM_TYPE = "BE" //Bill Entry:
    }
    if (this.router.url === '/bill-entry-with-bill-type') {
      this.FORM_TYPE = "BEWT" //Bill Entry:
    }

    this.ACTION_FLAG = ""
    this.model = {
      "billamt": null, //0, number
      "billdt": "", //"2021-05-11T11:44:13.208Z", string ($date-time)
      "billno": null, // 0, integer($int32)
      "billtp": null, //0,  integer($int32)
      "ccode": null, //0,   	integer($int32)
      "billdtl": []
    }

    this.model_two = {
      "billno": null, // 0, 	integer($int32)
      "itcode": null, //0,   	integer($int32)  Item Code
      "itrate": null, //0,   	number           Item Rate
      "qty": null, //0,       integer($int32)  Quantity
      "value": null, //0      number          Value
    }

    this.modelTwoArray = []
    this.modelList = []
    this.itemCodeList = []
    this.customerCodeList = []

    this.getModelList("")
    this.getBillTypeList()
    this.getCustomerCodeList("")

    if (this.FORM_TYPE === "BE") {
      this.getItemCodeListForBE("")
    }
  }

  getModelList(type) {
    this.modelList = []
    this.crudService.commonActionPerformGet(credentials.INVENTORY + 'get_bill_list' + `${"?" + 'billno='}` + type).subscribe(response => {
      this.modelList = response.data;
    }, (error) => {
      console.log("getRewsRoomListError=", JSON.stringify(error))
    });
  }

  searchByFilter() {
    this.getModelList(this.filters)
  }

  getBillTypeList() {
    this.billTypeList = [
      { "code": 1, "name": 1 },
      { "code": 2, "name": 2 }
    ]
  }

  async onSelectBillType(data) {
    if (this.FORM_TYPE === "BEWT") {
      this.itemCodeList = []
      await this.getItemCodeListFromBillType(data)

      this.model['billamt'] = null;
      this.modelTwoArray = []
      this.clearModelTwo()
      await this.addAutoGeneratedRow()
    }

  }

  getItemCodeListFromBillType(data) {
    return new Promise(resolve => {
      this.crudService.commonActionPerformGet(credentials.INVENTORY + 'item_list_by_bill_type' + `${"?" + 'type='}` + data['code']).subscribe(response => {
        this.itemCodeList = response.data;
        return resolve(response);
      }, (error) => {
        console.log("getRewsRoomListError=", JSON.stringify(error))
      });
    })
  }

  async addAutoGeneratedRow() {
    if (this.configService.isNullUndefined(this.itemCodeList) === true) {
      for await (const [index, element] of this.itemCodeList.entries()) {
        this.model_two = {
          "billno": null,
          "itcode": element,
          "itrate": element['itrate'],
          "qty": null,
          "value": null,
          "index": index
        }
        await this.modelTwoArray.push(this.model_two)
        await this.clearModelTwo()
      }
    }
  }

  getCustomerCodeList(name) {
    this.customerCodeList = []
    this.crudService.commonActionPerformGet(credentials.INVENTORY + 'get_customer_list' + `${"?" + 'name='}` + name).subscribe(response => {
      
      this.customerCodeList = response.data;
      console.log(response.data);
    }, (error) => {
      console.log("getRewsRoomListError=", JSON.stringify(error))
    });
  }

  onInputQuantity(data, i) {
    this.modelTwoArray[i]['value'] = this.modelTwoArray[i]['itrate'] * this.modelTwoArray[i]['qty']
    this.calculateBillAmount()
  }
  
  async onSelectItemCode(data, i) {

    let count = 0
    for await (const [index, element] of this.modelTwoArray.entries()) {
      if (element['itcode'] === await this.modelTwoArray[i]['itcode']) {
        count = await count + 1
      }
    }

    if (count > 1) {
      this.notificationServices.showNotification('error', "Item Code Already Exist");
      setTimeout(() => {
        this.modelTwoArray[i]['itcode'] = null;
        this.modelTwoArray[i]['itrate'] = null;
        this.modelTwoArray[i]['qty'] = null
      }, 100);
      return;
    }
    else {
      this.modelTwoArray[i]['itrate'] = null;
      this.modelTwoArray[i]['qty'] = null
      this.modelTwoArray[i]['itrate'] = data['itrate'];
    }

  }

  clearModelOne() {
    this.model = {
      "billamt": null, //0, number
      "billdt": "", //"2021-05-11T11:44:13.208Z", string ($date-time)
      "billno": null, // 0, integer($int32)
      "billtp": null, //0,  integer($int32)
      "ccode": null, //0,   	integer($int32)
      "billdtl": []
    }
  }

  clearModelTwo() {
    this.model_two = {
      "billno": null, // 0, 	integer($int32)
      "itcode": null, //0,   	integer($int32)
      "itrate": null, //0,   	number
      "qty": null, //0,       integer($int32)
      "value": null, //0      number
    }
  }


  addRow() {
    if (this.modelTwoArray.length !== 0) {
      if (this.configService.isNullUndefined(this.modelTwoArray[this.modelTwoArray.length - 1]['itcode']) === false) {
        this.notificationServices.showNotification('error', "Row already added");
        return;
      }
    }
    console.log(JSON.stringify(this.model_two));
    
    var json: any = {} = Object.assign({}, this.model_two);
    this.modelTwoArray.push(json)
    console.log(JSON.stringify(this.modelTwoArray));
    this.clearModelTwo()
  }

  async calculateBillAmount() {
    if (this.modelTwoArray.length !== 0) {
      this.model.billamt = null;
      for await (const [index, element] of this.modelTwoArray.entries()) {
        this.model.billamt = this.model.billamt + element['value']
      }
    }
  }

  async deleteRowData(data, index) {
    await this.modelTwoArray.splice(index, 1)
    this.modelTwoArray.forEach((element, index) => {
      element["index"] = index;
    });

    this.calculateBillAmount()
  }


  async editRowData(datas, index) {
    this.ACTION_FLAG = "EDIT"

    let response = await this.getDatabyBillNo(datas)
    response['billdt'] = new Date(response['billdt'])

    //BILL TYPE CODE NAME
    for await (const [index, element] of this.billTypeList.entries()) {
      if (response['billtp'] === await element['code']) {
        response['billtp'] = await element
        await this.getItemCodeListForBE("")
      }
    }

    //CUSTOMER CODE NAME
    for await (const [index, element] of this.customerCodeList.entries()) {
      if (response['ccode'] === element['ccode']) {
        response['ccode'] = element
      }
    }

    for await (const [index, element] of response['billdtl'].entries()) {
      for await (const [index, ele] of this.itemCodeList.entries()) {
        if (element['itcode'] === await ele['itcode']) {
          element['itcode'] = await ele
        }
      }
    }

    for await (const [index, element] of response['billdtl'].entries()) {
      element['index'] = index;
    }

    var tempData: any = {};
    tempData = Object.assign({}, response);
    this.model = tempData
    this.modelTwoArray = tempData['billdtl']
  }

  getItemCodeList(code) {
    return new Promise(resolve => {
      this.itemCodeList = []
      this.crudService.commonActionPerformGet(credentials.INVENTORY + 'item_list_by_bill_type' + `${"?" + 'type='}` + code).subscribe(response => {
        this.itemCodeList = response.data;
        return resolve(response)
      }, (error) => {
        console.log("getRewsRoomListError=", JSON.stringify(error))
      });
    })
  }

  //GET ITEM CODE LIST FOR BILL ENTRY FORM TYPE
  getItemCodeListForBE(name) {
    return new Promise(resolve => {
      this.itemCodeList = []
      this.crudService.commonActionPerformGet(credentials.INVENTORY + 'get_item_list' + `${"?" + 'name='}` + name).subscribe(response => {
        this.itemCodeList = response.data;
        return resolve(response)
      }, (error) => {
        console.log("getRewsRoomListError=", JSON.stringify(error))
      });
    })
  }

  getDatabyBillNo(datas) {
    return new Promise(resolve => {
      this.crudService.commonActionPerformGet(credentials.INVENTORY + 'get_bill/' + datas['billno']).subscribe(response => {
        return resolve(response)
      }, (error) => {
        console.log("getRewsRoomListError=", JSON.stringify(error))
      });
    })
  }

  onCancel() {
    if (this.searchFromFilter === false) {
      this.searchFromFilter = true;
    }
    else {
      this.searchFromFilter = false
    }
    this.onRefresh()
  }

  async onSave() {

    this.configService.enabledLoader();

    if (this.configService.isNullUndefined(this.model.billdt) === false) {
      this.notificationServices.showNotification('error', "Bill Date Required");
      document.getElementById("billdt").focus();
      this.configService.disableLoader();
      return;
    }
    if (this.configService.isNullUndefined(this.model.billtp) === false) {
      this.notificationServices.showNotification('error', "Bill Type Required");
      document.getElementById("billtp").focus();
      this.configService.disableLoader();
      return;
    }
    if (this.configService.isNullUndefined(this.model.ccode) === false) {
      this.notificationServices.showNotification('error', "Customer Code Required");
      document.getElementById("ccode").focus();
      this.configService.disableLoader();
      return;
    }

    if (this.modelTwoArray.length === 0) {
      this.notificationServices.showNotification('error', "One Entry detail must be added");
      this.configService.disableLoader();
      return;
    }

    if (this.modelTwoArray.length !== 0) {
      for await (const [index, element] of this.modelTwoArray.entries()) {
        if (this.configService.isNullUndefined(element['itcode']) === false) {
          document.getElementById("itcode" + index).focus();
          this.notificationServices.showNotification('error', "Select Item Code for row " + (index + 1));
          this.configService.disableLoader();
          return;
        }
        if (this.configService.isNullUndefined(element['itrate']) === false) {
          document.getElementById("itrate" + index).focus();
          this.notificationServices.showNotification('error', "Enter Item Rate for row " + (index + 1));
          this.configService.disableLoader();
          return;
        }
        if (this.configService.isNullUndefined(element['qty']) === false) {
          document.getElementById("qty" + index).focus();
          this.notificationServices.showNotification('error', "Enter Quantity for row " + (index + 1));
          this.configService.disableLoader();
          return;
        }
        if (this.configService.isNullUndefined(element['value']) === false) {
          document.getElementById("value" + index).focus();
          this.notificationServices.showNotification('error', "Enter Value for row " + (index + 1));
          this.configService.disableLoader();
          return;
        }
      }
    }


    var postJson: any = {};
    postJson = Object.assign({}, this.model);
    postJson['billdtl'] = this.modelTwoArray;

    await (this.configService.isNullUndefined(postJson.billdt) === true ? postJson.billdt = this.datepipe.transform(postJson.billdt, "yyyy-MM-dd HH:MM:SS") : postJson.billdt = postJson.billdt);
    await (this.configService.isNullUndefined(postJson.billtp) === true ? postJson.billtp = postJson.billtp['code'] : postJson.billtp = postJson.billtp)
    await (this.configService.isNullUndefined(postJson.ccode) === true ? postJson.ccode = postJson.ccode['ccode'] : postJson.ccode = postJson.ccode)

    //SECOND LEVEL JSON
    for await (const [index, element] of postJson['billdtl'].entries()) {
      await (this.configService.isNullUndefined(element.itcode) === true ? element.itcode = element.itcode['itcode'] : element.itcode = element.itcode)
      element['index'] = undefined;
    }


    // console.log("postJson =", JSON.stringify(postJson))
    this.crudService.commonActionPerformPost(credentials.INVENTORY + 'post_bill', postJson).subscribe(async (response) => {
      if (response.status === await "Success") {
        this.notificationServices.showNotification('success', response.message + " " + "Id =" + response.id);
        this.onRefresh()
        this.configService.disableLoader();
      }
      else {
        this.notificationServices.showNotification('error', response.message);
        this.configService.disableLoader();
      }
    }, (error) => {
      console.log("getModelListError=", JSON.stringify(error))
      this.notificationServices.showNotification('error', error);
      this.configService.disableLoader();
    });

  }


  onDelete(modelTwoArray, i) {
    console.log("onDelete =", modelTwoArray)
    this.model = modelTwoArray
  }

  confirmDelete() {
    this.configService.enabledLoader()
    this.crudService.commonActionPerformDelete(credentials.INVENTORY + 'delete_bill/' + this.model.billno).subscribe(async (response) => {
      if (response.status === await "Success") {
        this.notificationServices.showNotification('error', response.message);
        this.onRefresh()
        this.configService.disableLoader()
      }
      else {
        this.notificationServices.showNotification('error', response.message);
        this.onRefresh()
        this.configService.disableLoader();
      }
    }, (error) => {
      console.log("getModelListError=", JSON.stringify(error))
      this.notificationServices.showNotification('error', error);
      this.configService.disableLoader();
    });
  }
}
